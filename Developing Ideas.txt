Developing Ideas


Triggering Pairing and Provision Modes and setting up Internet Access{
	I don't see a way to incorporate a general wireless trigger for either of these modes because it would trigger any devise within earshot. We need to be device specific when triggering these modes.
	
	Method 1: Introduce a button on the Display. {
		Pros:{
			No electrician needed for settings changes or real time UI.
		}
		Cons:{
			This will only work for provision mode if Controller and Display are already successfully paired.
		}
	}
	Method 2: Trigger modes by SSID presence. {
		Currently, if Display broadcasts the MAC address of a nearby Controller as its SSID, the controller will connect to it. This arrangement is essentially the definition of being Paired.
		Can we use this technique to target specific devices? One possibility might be to extend the SSID scan routine that the controller does periodically, and introduce a similar routine in the Display.
	}
	Method 3: Utilizing button in Method 1 above. {
		No matter what, the button press triggers Provision mode.
		User logs into the Display as a local wifi hotspot. Password is algorithmically generated by Canary based on the MAC address and would be provided to client.
		Once logged in to the device access point, we have our various pages to interface with. In the settings page, there could be a section for Pairing where user would enter the MAC address of their Controller and Controller password (also algorithmically generated by Canary based on the MAC).
		<<Would we have to have this web server built into both the Controller and Display?>> Probably, with some variations between the two and to deal with the situation where only a Controller is installed (RCT studies). <<Would we write new code that allows us to pair to a Display from a Controller? Probably, and limitations would have to be built in so that Controller-Controller or Display-Display pairing is not allowed.>>
		Note: we currently have a password but it's universal for all Displays. That can stay in this Method, but the Controllers would need unique passwords so customers couldn't co-opt connections to their neighbors devices.
		Pros:{
			Easy to connect on rare occasion. ideal for once in a while settings changes.
		}
		Cons:{
			Not convenient for frequent interactivity with data as we eventually hope for from UI smartphone apps.
			Realistically limit interactivity to the cloud connection which would be less responsive, but still functional.
			Interactive cloud connection may freeze color level changes depending on configuration. <<can we define which configurations might allow color levels to change while connected.>>
		}
	}
	Method 4: Trigger modes by smartphone app or laptop app. {
		Very similar to Method 2, above, but simplifies ability for a user to connect.
		App would simulate the presence of an SSID (I have a feeling that we can accomplish this even when phone is not rooted, so long as we are not requiring it to serve as an actual hotspot). <<This needs to be researched.>>
		When Canary device scans for avenues of communication, it recognizes the faux SSID broadcast which then triggers whatever mode implied by the SSID. Possible SSID examples:
		<MAC>+"P" triggers Provision mode. SSID:20f85ea35cb0P
		<MAC>+"R" triggers Paring mode. SSID:20f85ea35cb0R (Pairing mode should be eliminated and assigned in settings instead).
		The trigger tells the device to swith to an access point.
		Smartphone app continues to scan for access points and as soon as a device accesspoint is recognized, it connects to it via normal wifi connection <<can we write apps with this permission?>>.
		The app then switches to a web browser interface to interact with connected device.
		
		Pros:{
			Super simple for users to access data and change settings or configurations.
			Eliminate the need to include a button into the Display (and even the Controller).
		}
		Cons: {
			Requires user to have a smartphone or a computer they can install programs on.
		}
	}
}

User interfaces{
	Display Indicators{
		Current{
			Left wing: Power
			Right wing: Energy
		}
		Adding ambient information{
			Additiona wing: ???
			Alternate indicator to clarify which mode each wing is on?{
				Surface LCD? Labeled discrete LED?
				
				Or, leave all unlabeled but the app clarifies each mode since the modes would likely only be modified via the app anyway.
				
				What about clearly different color schemes and patterns to differentiate modes?
			}
	}
	Cloud Interface{
		
	}
	App Interface{
		
	}
	Direct Hardware web server{
		
	}
	


}


